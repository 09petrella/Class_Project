{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3c60a449",
   "metadata": {},
   "outputs": [],
   "source": [
    "import csv\n",
    "import json\n",
    "\n",
    "## initialize lists\n",
    "fields = []\n",
    "rows = []\n",
    "\n",
    "outcsv = open('/Users/ajennings/Desktop/rutgers_bootcamp/Class_Project3/data_cleaning/movies_numbers_7.3.22_2.csv', newline='', mode='w', encoding='utf8')\n",
    "writeit = csv.writer(outcsv, delimiter=',', quotechar='\"', quoting=csv.QUOTE_MINIMAL)\n",
    "\n",
    "inFile = open('/Users/ajennings/Desktop/rutgers_bootcamp/Class_Project3/data_cleaning/movies_numbers_7.3.22.csv', 'r', encoding=\"utf8\")\n",
    "readit = csv.reader(inFile)\n",
    "\n",
    "#print(outcsv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6ef2dacc",
   "metadata": {},
   "outputs": [],
   "source": [
    "try: \n",
    "    fields = next(readit)\n",
    "\n",
    "except: \n",
    "    pass\n",
    "    \n",
    "for row in readit:\n",
    "    rows.append(row)\n",
    "\n",
    "## row 13 contains the list of dictionaries\n",
    "    try:\n",
    "        y = row[7]    \n",
    "    except:\n",
    "        pass\n",
    "\n",
    "## skip processing if row[13] is empty\n",
    "    #if (y !=''):\n",
    "    if \"name\" in y:\n",
    "\n",
    "## replace the single quote with a double quote so JSON can read it\n",
    "        fixed_row = y.replace(\"''\", '\"')\n",
    "\n",
    "## prepend and append stuff so that fixed_row looks like JSON\n",
    "        json_row = ('{ \"genre\": ' + fixed_row + '}')\n",
    "        #print(json_row)\n",
    "        json_obj = json.loads(json_row)\n",
    "\n",
    "## initialize a list to hold the genre types\n",
    "        rnames = []\n",
    "        for gen in json_obj[\"genre\"]:\n",
    "            rnames.append(gen[\"name\"])\n",
    "\n",
    "## the stupid part; read the rnames into a NEW list or you'll end up adding a new column for each genre where there is more than 1 genre\n",
    "        xtralist = []\n",
    "        xtralist.append(rnames)\n",
    "        row_list=(row[0:7]+xtralist+row[8:])\n",
    "        writeit.writerow(row_list)\n",
    "\n",
    "    else:\n",
    "## if there were no genres, just rewrite the row\n",
    "        writeit.writerow(row)\n",
    "\n",
    "inFile.close()\n",
    "outcsv.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f689a1bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "outcsv = open('/Users/ajennings/Desktop/rutgers_bootcamp/Class_Project3/data_cleaning/movies_numbers_7.3.22_cleangenres.csv', 'w', encoding='utf8')\n",
    "inFile = open('/Users/ajennings/Desktop/rutgers_bootcamp/Class_Project3/data_cleaning/movies_numbers_7.3.22_2.csv', 'r', encoding=\"utf8\")\n",
    "\n",
    "for eachLine in inFile:\n",
    "    w = eachLine.replace(',[', ',\"')\n",
    "    x = w.replace('],', '\",')\n",
    "    y = x.replace('[','')\n",
    "    z = y.replace(']','')\n",
    "    a = z.replace(\"'\",\"\")\n",
    "    outcsv.write(a)\n",
    "\n",
    "inFile.close()\n",
    "outcsv.close()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
